using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

class Program
{
    static void Main()
    {
        Console.WriteLine("Welcome to Advanced File Encryptor!");

        Console.Write("Enter the path to the file you want to encrypt: ");
        string filePath = Console.ReadLine();

        if (!File.Exists(filePath))
        {
            Console.WriteLine("File not found.");
            return;
        }

        Console.Write("Enter the encryption password: ");
        string password = Console.ReadLine();

        string encryptedFilePath = EncryptFile(filePath, password);

        Console.WriteLine("File encrypted successfully.");
        Console.WriteLine("Encrypted file: " + encryptedFilePath);
    }

    static string EncryptFile(string filePath, string password)
    {
        string encryptedFilePath = GetEncryptedFilePath(filePath);

        using (Aes aes = Aes.Create())
        {
            byte[] salt = GenerateSalt();

            Rfc2898DeriveBytes keyDerivation = new Rfc2898DeriveBytes(password, salt, 10000);
            byte[] key = keyDerivation.GetBytes(32);
            byte[] iv = keyDerivation.GetBytes(16);

            aes.Key = key;
            aes.IV = iv;

            using (FileStream inputFile = new FileStream(filePath, FileMode.Open, FileAccess.Read))
            using (FileStream outputFile = new FileStream(encryptedFilePath, FileMode.Create, FileAccess.Write))
            using (CryptoStream cryptoStream = new CryptoStream(outputFile, aes.CreateEncryptor(), CryptoStreamMode.Write))
            {
                inputFile.CopyTo(cryptoStream);
            }
        }

        return encryptedFilePath;
    }

    static byte[] GenerateSalt()
    {
        byte[] salt = new byte[16];

        using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
        {
            rng.GetBytes(salt);
        }

        return salt;
    }

    static string GetEncryptedFilePath(string filePath)
    {
        string directory = Path.GetDirectoryName(filePath);
        string fileName = Path.GetFileNameWithoutExtension(filePath);
        string extension = Path.GetExtension(filePath);

        string encryptedFileName = fileName + "_encrypted" + extension;
        string encryptedFilePath = Path.Combine(directory, encryptedFileName);

        return encryptedFilePath;
    }
}
